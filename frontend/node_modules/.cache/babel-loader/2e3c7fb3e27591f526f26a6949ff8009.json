{"ast":null,"code":"var _jsxFileName = \"/Users/leocao/T18B-Blue/src/components/Hangman/HangmanGame.jsx\";\nimport React from 'react';\nimport axios from 'axios';\nimport { TailSpin } from 'svg-loaders-react';\nimport { LifeDisplay } from './LifeDisplay';\nimport { WordDisplay } from './WordDisplay';\nexport class HangmanGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inProgress: false,\n      guesses: [],\n      lives: -1,\n      incorrectLetters: [],\n      channel_id: this.props.channel_id,\n      token: this.props.token\n    };\n    this.toggleOn = this.toggleOn.bind(this);\n    this.checkActive = this.checkActive.bind(this);\n    this.updateData = this.updateData.bind(this);\n    this.timerCheckUpdated = this.timerCheckUpdated.bind(this);\n    this.checkGameFinished = this.checkGameFinished.bind(this);\n    this.getAnswer = this.getAnswer.bind(this);\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.timerCheckUpdated(), 7500);\n\n    if (this.checkActive()) {\n      this.updateData();\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  timerCheckUpdated() {\n    console.log(\"Checking data\");\n    var initialState = this.state.inProgress;\n    console.log(\"Initial state: \" + initialState); // If game not in progress, check if the game has started\n\n    if (!this.state.inProgress) {\n      // Call /hangman/active\n      var newState = this.checkActive(); // check if the state has changed\n\n      console.log(\"New state: \" + newState);\n\n      if (initialState !== newState) {\n        // the state has changed... get the data\n        this.updateData();\n      }\n    } else {\n      // the game is already in progress\n      // check for new data\n      this.updateData();\n    }\n\n    console.log(\"Updated guesses:\" + this.state.guesses);\n  }\n\n  toggleOn() {\n    console.log(\"Game toggled on\");\n    this.setState({\n      inProgress: true\n    });\n  }\n\n  checkActive() {\n    var token = this.props.token;\n    var channel_id = this.props.channel_id;\n    var in_progress = this.state.inProgress;\n    axios.get('/hangman/active', {\n      params: {\n        token,\n        channel_id\n      }\n    }).then(({\n      data\n    }) => {\n      if (data.in_progress === true) {\n        this.setState({\n          inProgress: true\n        });\n        in_progress = true;\n        console.log(\"New state after checking... \" + this.state.inProgress);\n        return true;\n      }\n    }).catch(err => {});\n    return in_progress;\n  }\n\n  updateData() {\n    var token = this.props.token;\n    var channel_id = this.props.channel_id;\n    var return_list = [];\n    var return_data = {};\n    axios.get('/hangman/details', {\n      params: {\n        token,\n        channel_id\n      }\n    }).then(({\n      data\n    }) => {\n      const {\n        lives,\n        guesses,\n        incorrect_guesses\n      } = data;\n      this.setState({\n        lives: lives,\n        guesses: guesses,\n        incorrectLetters: incorrect_guesses\n      });\n      this.checkGameFinished(guesses);\n    }).catch(err => {});\n  }\n\n  checkGameFinished(guesses) {\n    if (!guesses.includes(null)) {\n      // the game has finished\n      this.setState({\n        inProgress: false,\n        lives: -1\n      });\n      alert(\"You won! Good job!\");\n    } else if (this.state.lives == 0) {\n      this.setState({\n        inProgress: false,\n        lives: -1\n      });\n      this.getAnswer();\n    }\n  }\n\n  getAnswer() {\n    var token = this.props.token;\n    var channel_id = this.props.channel_id;\n    axios.get('/hangman/answer', {\n      token,\n      channel_id\n    }).then(({\n      data\n    }) => {\n      alert(\"You lost! The word was: \" + data.answer);\n    }).catch(err => {\n      alert(\"You lost!\\nDue to an error the correct answer could not be retrieved.\");\n    });\n  }\n\n  render() {\n    if (this.state.inProgress) {\n      if (this.state.lives === -1) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, React.createElement(\"h2\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145\n          },\n          __self: this\n        }, \"Loading...\"), React.createElement(TailSpin, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146\n          },\n          __self: this\n        }));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 149\n          },\n          __self: this\n        }, React.createElement(WordDisplay, {\n          guesses: this.state.guesses,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150\n          },\n          __self: this\n        }), React.createElement(LifeDisplay, {\n          lives: this.state.lives,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151\n          },\n          __self: this\n        }));\n      }\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, \"Game not in progress... Type `/hangman` to start!\"));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/leocao/T18B-Blue/src/components/Hangman/HangmanGame.jsx"],"names":["React","axios","TailSpin","LifeDisplay","WordDisplay","HangmanGame","Component","constructor","props","state","inProgress","guesses","lives","incorrectLetters","channel_id","token","toggleOn","bind","checkActive","updateData","timerCheckUpdated","checkGameFinished","getAnswer","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","console","log","initialState","newState","setState","in_progress","get","params","then","data","catch","err","return_list","return_data","incorrect_guesses","includes","alert","answer","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport { TailSpin } from 'svg-loaders-react'\nimport { LifeDisplay } from './LifeDisplay';\nimport { WordDisplay } from './WordDisplay';\n\n\nexport class HangmanGame extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            inProgress: false,\n            guesses: [],\n            lives: -1,\n            incorrectLetters: [],\n            channel_id: this.props.channel_id,\n            token: this.props.token,\n        }\n\n\n        this.toggleOn = this.toggleOn.bind(this);\n        this.checkActive = this.checkActive.bind(this);\n        this.updateData = this.updateData.bind(this);\n        this.timerCheckUpdated = this.timerCheckUpdated.bind(this);\n        this.checkGameFinished = this.checkGameFinished.bind(this);\n        this.getAnswer = this.getAnswer.bind(this);\n    }\n\n    componentDidMount() {\n        this.interval = setInterval(() => this.timerCheckUpdated(), 7500);\n\n        if (this.checkActive()) {\n            this.updateData();\n        }\n\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    timerCheckUpdated() {\n        console.log(\"Checking data\")\n        var initialState = this.state.inProgress;\n        console.log(\"Initial state: \" + initialState);\n        // If game not in progress, check if the game has started\n        if (!this.state.inProgress) {\n            // Call /hangman/active\n            var newState = this.checkActive();\n            // check if the state has changed\n            console.log(\"New state: \" + newState);\n            if (initialState !== newState) {\n                // the state has changed... get the data\n                this.updateData();\n            }\n        } else {\n            // the game is already in progress\n            // check for new data\n            this.updateData();\n        }\n        console.log(\"Updated guesses:\" + this.state.guesses);\n    }\n\n    toggleOn() {\n        console.log(\"Game toggled on\");\n        this.setState({ inProgress: true });\n    }\n\n    checkActive() {\n        var token = this.props.token;\n        var channel_id = this.props.channel_id;\n        var in_progress = this.state.inProgress;\n        axios\n            .get('/hangman/active', {\n                params: {\n                    token,\n                    channel_id,\n                },\n            })\n            .then(({ data }) => {\n                if (data.in_progress === true) {\n                    this.setState({\n                        inProgress: true,\n                    });\n                    in_progress = true;\n                    console.log(\"New state after checking... \" + this.state.inProgress);\n                    return true;\n                }\n            }).catch((err) => { });\n        return in_progress;\n    }\n\n\n    updateData() {\n        var token = this.props.token;\n        var channel_id = this.props.channel_id;\n        var return_list = [];\n        var return_data = {};\n        axios\n            .get('/hangman/details', {\n                params: {\n                    token,\n                    channel_id,\n                },\n            })\n            .then(({ data }) => {\n                const { lives, guesses, incorrect_guesses } = data;\n                this.setState({\n                    lives: lives,\n                    guesses: guesses,\n                    incorrectLetters: incorrect_guesses,\n                })\n                this.checkGameFinished(guesses);\n            }).catch((err) => { });\n    }\n\n    checkGameFinished(guesses) {\n        if (!guesses.includes(null)) {\n            // the game has finished\n            this.setState({ inProgress: false, lives: -1 });\n            alert(\"You won! Good job!\")\n        } else if (this.state.lives == 0) {\n            this.setState({ inProgress: false, lives: -1 });\n            this.getAnswer();\n        }\n    }\n\n    getAnswer() {\n        var token = this.props.token;\n        var channel_id = this.props.channel_id;\n        axios.get('/hangman/answer', { token, channel_id })\n            .then(({ data }) => {\n                alert(\"You lost! The word was: \" + data.answer);\n            })\n            .catch((err) => {\n                alert(\"You lost!\\nDue to an error the correct answer could not be retrieved.\");\n            });\n    }\n\n    render() {\n        if (this.state.inProgress) {\n            if (this.state.lives === -1) {\n                return <div>\n                    <h2>Loading...</h2>\n                    <TailSpin />\n                </div>\n            } else {\n                return <div>\n                    <WordDisplay guesses={this.state.guesses} />\n                    <LifeDisplay lives={this.state.lives} />\n                </div>\n            }\n\n        } else {\n            return <div>\n                <h3>Game not in progress... Type `/hangman` to start!</h3>\n            </div>\n        }\n\n    }\n}"]},"metadata":{},"sourceType":"module"}